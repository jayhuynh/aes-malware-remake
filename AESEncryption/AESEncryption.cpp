//
// Created by JAY HUYNH on 11/10/2019.
//

#include "AESEncryption.h"

AESEncryption::AESEncryption() {
    this->aesCore = AESCore();
}

void AESEncryption::encrypt(unsigned char *message, unsigned char *key, unsigned char *expandedKey) {
    unsigned char tempMessage[16];
    for (int i = 0; i < 16; i++)
    {
        tempMessage[i] = message[i];
    }

    int numberOfRound = 9;

    //Expand the key


    this->aesCore.addRoundKey(tempMessage, key); //Add Roundkey

    for (int i = 0; i < numberOfRound; i++)
    {
        this->aesCore.subBytes(tempMessage);
        this->aesCore.shiftRows(tempMessage);
        this->aesCore.mixColumns(tempMessage);
        this->aesCore.addRoundKey(tempMessage, expandedKey + (16 * (i + 1)));
    }
    //Final round
    this->aesCore.subBytes(tempMessage);
    this->aesCore.shiftRows(tempMessage);
    this->aesCore.addRoundKey(tempMessage, expandedKey + 160);

    //Copy the encrypted tempMessage to the message 
    for (int i = 0; i < 16; i++)
    {
        message[i] = tempMessage[i];
    }
}

void AESEncryption::decrypt(unsigned char *message, unsigned char *key, unsigned char *expandedKey) {
    unsigned char tempMessage[16];
    for (int i = 0; i < 16; i++)
    {
        tempMessage[i] = message[i];
    }

    int numberOfRound = 9;

    //Expand the key


    this->aesCore.addRoundKey(tempMessage, expandedKey + 160); //Add Roundkey

    for (int i = numberOfRound - 1; i >= 0; i--)
    {
        this->aesCore.IV_shiftRows(tempMessage);
        this->aesCore.IV_subBytes(tempMessage);
        this->aesCore.addRoundKey(tempMessage, expandedKey + (16 * (i + 1)));
        this->aesCore.IV_mixColumns(tempMessage);
    }
    //Final round
    this->aesCore.IV_shiftRows(tempMessage);
    this->aesCore.IV_subBytes(tempMessage);
    this->aesCore.addRoundKey(tempMessage, key);

    //Copy the encrypted tempMessage to the message 
    for (int i = 0; i < 16; i++)
    {
        message[i] = tempMessage[i];
    }
}