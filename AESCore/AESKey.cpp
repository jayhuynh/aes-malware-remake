//
// Created by JAY HUYNH on 11/10/2019.
//

#include "AESKey.h"
#include "AESTables.h"

void AESKey::keyExpansionCore(unsigned char *in, unsigned char i){
    //Rotate left
    unsigned int*q = (unsigned int*)in;
    *q = (*q >> 8) | ((*q & 0xff) << 24);

    //S-box 4 bytes
    in[0] = AESTables::s_box[in[0]];
    in[1] = AESTables::s_box[in[1]];
    in[2] = AESTables::s_box[in[2]];
    in[3] = AESTables::s_box[in[3]];

    //Rcon
    in[0] ^= AESTables::rcon[i];
}

void AESKey::keyExpansion(unsigned char *inputKey, unsigned char *expandedKeys) {
    //The first 16 bytes are original key
    for (int i = 0; i < 16; i++)
    {
        expandedKeys[i] = inputKey[i];
    }

    //Variables
    int byteGenerated = 16; //We have generated 16 bytes so far
    int rconIteration = 1; //rconIteration begin at 1
    unsigned char temp[4]; //Temporary storage for core

    while (byteGenerated < 176)
    {
        //Read 4 bytes for the core
        for (int i = 0; i < 4; i++)
        {
            temp[i] = expandedKeys[i + byteGenerated - 4];
        }

        //Perform the core once for each 16 byte key
        if (byteGenerated % 16 == 0)
        {
            this->keyExpansionCore(temp, rconIteration++);
        }

        //XOR temp with [byteGenerated - 16], and store the expandedKeys
        for (unsigned char a = 0; a < 4; a++)
        {
            expandedKeys[byteGenerated] = expandedKeys[byteGenerated - 16] ^ temp[a];
            byteGenerated++;
        }
    }
}